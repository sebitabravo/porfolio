<!-- Dynamic Statistics Script -->
<script>
  // Dynamic Statistics Calculator
  document.addEventListener('DOMContentLoaded', () => {
    class DynamicStats {
      startDate: Date;
      githubUser: string;
      socialProfiles: { instagram: string; youtube: string; facebook: string; };

      constructor() {
        this.startDate = new Date('2021-01-01'); // Fecha de inicio como desarrollador
        this.githubUser = 'sebitabravo';
        this.socialProfiles = {
          instagram: 'sebitabravo',
          youtube: '@sebitabravo',
          facebook: 'sebitabravo'
        };

        this.init();
      }

      // Calcula años de experiencia dinámicamente
      calculateExperience() {
        const now = new Date();
        const diffTime = Math.abs(now.getTime() - this.startDate.getTime());
        const diffYears = Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 365.25));
        return diffYears;
      }

      // Obtiene repositorios de GitHub usando la API pública
      async getGitHubRepos() {
        try {
          const response = await fetch(`https://api.github.com/users/${this.githubUser}/repos?per_page=100`);
          if (!response.ok) throw new Error('GitHub API error');

          const repos = await response.json();
          // Filtrar repos públicos y no fork
          const publicRepos = repos.filter((repo: any) => !repo.fork && !repo.private);
          return publicRepos.length;
        } catch (error) {
          console.warn('Error fetching GitHub repos:', error);
          return 10; // Fallback value
        }
      }

      // Simula obtener seguidores de redes sociales
      // Nota: La mayoría de APIs de redes sociales requieren autenticación
      async getSocialFollowers() {
        try {
          // Por ahora usaremos valores base que puedes actualizar manualmente
          // En un futuro podrías conectar con APIs oficiales o usar servicios como Zapier
          const followers = {
            instagram: 500,  // Actualiza estos valores según tus stats reales
            youtube: 300,
            facebook: 200
          };

          return followers.instagram + followers.youtube + followers.facebook;
        } catch (error) {
          console.warn('Error fetching social followers:', error);
          return 1000; // Fallback value
        }
      }

      // Formatea números para mostrar con sufijo K, M, etc.
      formatNumber(num: number) {
        if (num >= 1000000) {
          return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
          return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
      }

      // Actualiza las estadísticas en la UI
      async updateStats() {
        try {
          // Años de experiencia
          const years = this.calculateExperience();
          const yearsElement = document.getElementById('years-experience');
          if (yearsElement) {
            yearsElement.textContent = `${years}+`;
          }

          // Repositorios de GitHub
          const repos = await this.getGitHubRepos();
          const reposElement = document.getElementById('github-repos');
          if (reposElement) {
            reposElement.textContent = `${repos}+`;
          }

          // Seguidores totales
          const followers = await this.getSocialFollowers();
          const followersElement = document.getElementById('total-followers');
          if (followersElement) {
            followersElement.textContent = this.formatNumber(followers) + '+';
          }

          console.log('✅ Estadísticas actualizadas:', { years, repos, followers });
        } catch (error) {
          console.error('Error updating stats:', error);
        }
      }

      // Inicializa el sistema
      init() {
        // Actualizar al cargar la página
        this.updateStats();

        // Actualizar cada 5 minutos (para repos de GitHub)
        setInterval(() => {
          this.updateStats();
        }, 5 * 60 * 1000);
      }
    }

    // Inicializar el sistema
    new DynamicStats();
  });
</script>
