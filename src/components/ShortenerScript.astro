---
// JavaScript logic for URL shortener functionality
---

<script>
  interface ShortenedLink {
    id: string;
    originalUrl: string;
    shortCode: string;
    customPath: string;
    createdAt: string;
  }

  // Elementos del DOM
  const form = document.getElementById("shortenForm") as HTMLFormElement;
  const resultDiv = document.getElementById("result") as HTMLDivElement;
  const loadingDiv = document.getElementById("loading") as HTMLDivElement;
  const errorDiv = document.getElementById("error") as HTMLDivElement;
  const shortUrlSpan = document.getElementById("shortUrl") as HTMLSpanElement;
  const copyBtn = document.getElementById("copyBtn") as HTMLButtonElement;
  const errorMessage = document.getElementById(
    "errorMessage"
  ) as HTMLParagraphElement;
  const linksList = document.getElementById("linksList") as HTMLDivElement;
  const noLinks = document.getElementById("noLinks") as HTMLDivElement;
  const refreshBtn = document.getElementById("refreshBtn") as HTMLButtonElement;

  // Función para mostrar/ocultar elementos
  function showElement(element: HTMLElement) {
    element.classList.remove("hidden");
  }

  function hideElement(element: HTMLElement) {
    element.classList.add("hidden");
  }

  // Función para mostrar error
  function showError(message: string) {
    errorMessage.textContent = message;
    showElement(errorDiv);
    hideElement(resultDiv);
    hideElement(loadingDiv);
  }

  // Función para mostrar resultado exitoso
  function showSuccess(shortUrl: string) {
    shortUrlSpan.textContent = shortUrl;
    showElement(resultDiv);
    hideElement(errorDiv);
    hideElement(loadingDiv);
  }

  // Función para copiar al portapapeles
  async function copyToClipboard(text: string) {
    try {
      await navigator.clipboard.writeText(text);
      copyBtn.textContent = "¡Copiado!";
      setTimeout(() => {
        copyBtn.textContent = "Copiar";
      }, 2000);
    } catch (err) {
      console.error("Error al copiar:", err);
    }
  }

  // Función para formatear fecha
  function formatDate(dateString: string): string {
    return new Date(dateString).toLocaleDateString("es-ES", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }

  // Función para formatear customPath como título descriptivo
  function formatTitleFromCustomPath(customPath: string): string {
    return customPath
      .replace(/[-_]/g, " ")
      .replace(/\b\w/g, (letter) => letter.toUpperCase())
      .trim();
  }

  // Función para renderizar estadísticas
  function renderStats(stats: { totalLinks: number }) {
    const statsContainer = document.getElementById("statsContainer");
    if (!statsContainer) return;

    statsContainer.innerHTML = `
      <div class="grid grid-cols-1 gap-4 mb-8">
        <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-6 text-white">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-blue-100 text-sm font-medium">Total de Enlaces</p>
              <p class="text-3xl font-bold">${stats.totalLinks}</p>
            </div>
            <div class="p-3 bg-blue-400 bg-opacity-30 rounded-lg">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Función para cargar estadísticas
  async function loadStats() {
    try {
      const response = await fetch("/api/stats");
      const data = await response.json();

      if (data.success) {
        renderStats(data.data);
      } else {
        console.error("Error al cargar estadísticas:", data.error);
      }
    } catch (error) {
      console.error("Error al cargar estadísticas:", error);
    }
  }

  // Función para renderizar la lista de links
  function renderLinks(links: ShortenedLink[]) {
    if (links.length === 0) {
      showElement(noLinks);
      linksList.innerHTML = "";
      return;
    }

    hideElement(noLinks);
    linksList.innerHTML = links
      .map(
        (link) => `
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-all duration-200 hover:shadow-md">
        <div class="flex items-start justify-between mb-4">
          <div class="flex-1 min-w-0">
            <div class="flex items-center gap-3 mb-3">
              <h3 class="text-xl font-bold text-gray-900 dark:text-white">
                ${formatTitleFromCustomPath(link.customPath)}
              </h3>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 border border-blue-200 dark:border-blue-800">
                ${link.customPath}
              </span>
            </div>
            <div class="space-y-2">
              <div class="flex items-start gap-2">
                <span class="text-sm font-medium text-gray-600 dark:text-gray-300 flex-shrink-0">Destino:</span>
                <p class="text-sm text-gray-700 dark:text-gray-300 break-all">
                  ${link.originalUrl}
                </p>
              </div>
              <div class="flex items-center gap-2">
                <span class="text-sm font-medium text-gray-600 dark:text-gray-300 flex-shrink-0">URL corta:</span>
                <code class="text-sm text-blue-600 dark:text-blue-400 font-mono bg-blue-50 dark:bg-blue-950 px-2 py-1 rounded border">
                  ${window.location.origin}/${link.customPath}
                </code>
              </div>
            </div>
          </div>
          <button
            onclick="deleteLink('${link.id}')"
            class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-sm flex-shrink-0 ml-4 p-2 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
            title="Requiere contraseña de administrador"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
        <div class="flex items-center justify-between pt-4 border-t border-gray-100 dark:border-gray-700">
          <div class="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Creado: ${formatDate(link.createdAt)}</span>
          </div>
          <button
            onclick="copyToClipboard('${window.location.origin}/${link.customPath}')"
            class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 font-medium shadow-sm hover:shadow flex items-center gap-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            Copiar Enlace
          </button>
        </div>
      </div>
    `
      )
      .join("");
  }

  // Función para cargar links
  async function loadLinks() {
    try {
      const response = await fetch("/api/links");
      const data = await response.json();

      if (data.success) {
        renderLinks(data.data);
      } else {
        console.error("Error al cargar links:", data.error);
      }
    } catch (error) {
      console.error("Error al cargar links:", error);
    }
  }

  // Función para cargar todos los datos
  async function loadAllData() {
    await Promise.all([loadLinks(), loadStats()]);
  }

  // Función para verificar contraseña
  async function verifyPassword(): Promise<boolean> {
    const password = prompt("Ingresa la contraseña de administrador:");
    if (!password) return false;

    try {
      const response = await fetch("/api/auth", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ password }),
      });

      const data = await response.json();
      return data.success;
    } catch (error) {
      console.error("Error al verificar contraseña:", error);
      return false;
    }
  }

  // Función para eliminar link con autenticación
  async function deleteLink(id: string) {
    if (!confirm("¿Estás seguro de que quieres eliminar este link?")) {
      return;
    }

    // Verificar contraseña antes de eliminar
    const isAuthenticated = await verifyPassword();
    if (!isAuthenticated) {
      alert("Contraseña incorrecta. No se puede eliminar el link.");
      return;
    }

    try {
      const response = await fetch("/api/links", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ id }),
      });

      const data = await response.json();

      if (data.success) {
        loadAllData(); // Recargar la lista y estadísticas
      } else {
        alert("Error al eliminar el link: " + data.error);
      }
    } catch (error) {
      console.error("Error al eliminar link:", error);
      alert("Error al eliminar el link");
    }
  }

  // Hacer deleteLink global para que funcione desde el HTML
  (window as any).deleteLink = deleteLink;
  (window as any).copyToClipboard = copyToClipboard;

  // Event listeners
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    hideElement(resultDiv);
    hideElement(errorDiv);

    // Verificar contraseña antes de crear el link
    const isAuthenticated = await verifyPassword();
    if (!isAuthenticated) {
      showError("Contraseña incorrecta. No se puede crear el link.");
      return;
    }

    showElement(loadingDiv);

    const formData = new FormData(form);
    const url = formData.get("url") as string;
    const customPath = formData.get("customPath") as string;

    // Validar que customPath esté presente
    if (!customPath || !customPath.trim()) {
      showError("La ruta personalizada es obligatoria");
      return;
    }

    try {
      const response = await fetch("/api/shorten", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          url,
          customPath,
        }),
      });

      const data = await response.json();

      if (data.success) {
        showSuccess(data.data.shortUrl);
        form.reset();
        loadAllData(); // Recargar la lista de links y estadísticas
      } else {
        showError(data.error || "Error desconocido");
      }
    } catch (error) {
      showError("Error de conexión. Intenta de nuevo.");
    }
  });

  copyBtn.addEventListener("click", () => {
    copyToClipboard(shortUrlSpan.textContent || "");
  });

  refreshBtn.addEventListener("click", loadAllData);

  // Cargar links y estadísticas al cargar la página
  loadAllData();
</script>
