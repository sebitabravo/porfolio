---
// JavaScript logic for URL shortener functionality
---

<script>
  interface ShortenedLink {
    id: string;
    originalUrl: string;
    shortCode: string;
    customPath: string;
    createdAt: string;
  }

  // Elementos del DOM
  const form = document.getElementById("shortenForm") as HTMLFormElement;
  const resultDiv = document.getElementById("result") as HTMLDivElement;
  const loadingDiv = document.getElementById("loading") as HTMLDivElement;
  const errorDiv = document.getElementById("error") as HTMLDivElement;
  const shortUrlSpan = document.getElementById("shortUrl") as HTMLSpanElement;
  const copyBtn = document.getElementById("copyBtn") as HTMLButtonElement;
  const errorMessage = document.getElementById(
    "errorMessage"
  ) as HTMLParagraphElement;
  const linksList = document.getElementById("linksList") as HTMLDivElement;
  const noLinks = document.getElementById("noLinks") as HTMLDivElement;
  const refreshBtn = document.getElementById("refreshBtn") as HTMLButtonElement;

  // Funci√≥n para mostrar/ocultar elementos
  function showElement(element: HTMLElement) {
    element.classList.remove("hidden");
  }

  function hideElement(element: HTMLElement) {
    element.classList.add("hidden");
  }

  // Funci√≥n para mostrar error
  function showError(message: string) {
    errorMessage.textContent = message;
    showElement(errorDiv);
    hideElement(resultDiv);
    hideElement(loadingDiv);
  }

  // Funci√≥n para mostrar resultado exitoso
  function showSuccess(shortUrl: string) {
    shortUrlSpan.textContent = shortUrl;
    showElement(resultDiv);
    hideElement(errorDiv);
    hideElement(loadingDiv);
  }

  // Funci√≥n para copiar al portapapeles
  async function copyToClipboard(text: string) {
    try {
      await navigator.clipboard.writeText(text);
      copyBtn.textContent = "¬°Copiado!";
      setTimeout(() => {
        copyBtn.textContent = "Copiar";
      }, 2000);
    } catch (err) {
      console.error("Error al copiar:", err);
    }
  }

  // Funci√≥n para formatear fecha
  function formatDate(dateString: string): string {
    return new Date(dateString).toLocaleDateString("es-ES", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  } // Funci√≥n para formatear customPath como t√≠tulo descriptivo
  function formatTitleFromCustomPath(customPath: string): string {
    return customPath
      .replace(/[-_]/g, " ")
      .replace(/\b\w/g, (letter) => letter.toUpperCase())
      .trim();
  }

  // Funci√≥n para renderizar la lista de links
  function renderLinks(links: ShortenedLink[]) {
    if (links.length === 0) {
      showElement(noLinks);
      linksList.innerHTML = "";
      return;
    }

    hideElement(noLinks);
    linksList.innerHTML = links
      .map(
        (link) => `
      <div class="group relative">
        <div class="absolute -inset-1 bg-gradient-to-r from-primary-500/20 to-secondary-500/20 rounded-2xl blur-xl opacity-0 group-hover:opacity-50 transition-opacity duration-500"></div>

        <div class="relative bg-white/5 backdrop-blur-sm border border-white/20 dark:border-neutral-700/50 rounded-2xl p-4 md:p-6 transition-all duration-300 hover:bg-white/10 hover:border-white/30 shadow-xl">
          <div class="flex flex-col md:flex-row md:items-start md:justify-between mb-4">
            <div class="flex-1 min-w-0">
              <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-3">
                <h3 class="text-lg md:text-xl font-bold bg-gradient-to-r from-white to-neutral-300 bg-clip-text text-transparent font-display">
                  ${formatTitleFromCustomPath(link.customPath)}
                </h3>
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-accent-500/20 to-secondary-500/20 text-accent-200 border border-accent-400/30 backdrop-blur-sm w-fit">
                  ${link.customPath}
                </span>
              </div>
              <div class="space-y-2 md:space-y-3">
                <div class="flex flex-col sm:flex-row sm:items-start gap-1 sm:gap-2">
                  <span class="text-sm font-semibold text-accent-300 flex-shrink-0">üéØ Destino:</span>
                  <p class="text-sm text-neutral-300 break-all leading-relaxed">
                    ${link.originalUrl}
                  </p>
                </div>
                <div class="hidden md:flex items-start gap-2">
                  <span class="text-sm font-semibold text-accent-300 flex-shrink-0">üîó URL corta:</span>
                  <div class="flex-1 min-w-0">
                    <code class="text-sm text-primary-300 font-mono bg-primary-900/30 px-3 py-1 rounded-lg border border-primary-500/30 backdrop-blur-sm block break-all">
                      ${window.location.origin}/${link.customPath}
                    </code>
                  </div>
                </div>
              </div>
            </div>
            <button
              onclick="deleteLink('${link.id}')"
              class="text-red-400 hover:text-red-300 text-sm flex-shrink-0 mt-3 md:mt-0 md:ml-4 p-2 md:p-3 hover:bg-red-500/20 rounded-xl transition-all duration-200 backdrop-blur-sm border border-red-500/30 hover:border-red-500/50 self-start"
              title="Requiere contrase√±a de administrador"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between pt-3 md:pt-4 border-t border-white/10 gap-3 sm:gap-0">
            <div class="flex items-center gap-2 text-xs text-neutral-400">
              <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>‚è∞ Creado: ${formatDate(link.createdAt)}</span>
            </div>
            <button
              onclick="copyToClipboard('${window.location.origin}/${link.customPath}')"
              class="bg-gradient-to-r from-primary-500 to-secondary-500 hover:from-primary-600 hover:to-secondary-600 text-white px-4 py-2 rounded-xl text-sm transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center justify-center gap-2 backdrop-blur-sm border border-white/20 w-full sm:w-auto"
            >
              <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
              </svg>
              <span class="hidden sm:inline">üìã Copiar Enlace</span>
              <span class="sm:hidden">Copiar</span>
            </button>
          </div>
        </div>
      </div>
    `
      )
      .join("");
  }

  // Funci√≥n para cargar links
  async function loadLinks() {
    try {
      const response = await fetch("/api/links");
      const data = await response.json();

      if (data.success) {
        renderLinks(data.data);
      } else {
        console.error("Error al cargar links:", data.error);
      }
    } catch (error) {
      console.error("Error al cargar links:", error);
    }
  }

  // Funci√≥n para cargar todos los datos
  async function loadAllData() {
    await loadLinks();
  }

  // Funci√≥n para verificar contrase√±a
  async function verifyPassword(): Promise<boolean> {
    const password = prompt("Ingresa la contrase√±a de administrador:");
    if (!password) return false;

    try {
      const response = await fetch("/api/auth", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ password }),
      });

      const data = await response.json();
      return data.success;
    } catch (error) {
      console.error("Error al verificar contrase√±a:", error);
      return false;
    }
  }

  // Funci√≥n para eliminar link con autenticaci√≥n
  async function deleteLink(id: string) {
    if (!confirm("¬øEst√°s seguro de que quieres eliminar este link?")) {
      return;
    }

    // Verificar contrase√±a antes de eliminar
    const isAuthenticated = await verifyPassword();
    if (!isAuthenticated) {
      alert("Contrase√±a incorrecta. No se puede eliminar el link.");
      return;
    }

    try {
      const response = await fetch("/api/links", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ id }),
      });

      const data = await response.json();

      if (data.success) {
        loadAllData(); // Recargar la lista de links
      } else {
        alert("Error al eliminar el link: " + data.error);
      }
    } catch (error) {
      console.error("Error al eliminar link:", error);
      alert("Error al eliminar el link");
    }
  }

  // Hacer deleteLink global para que funcione desde el HTML
  (window as any).deleteLink = deleteLink;
  (window as any).copyToClipboard = copyToClipboard;

  // Event listeners
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    hideElement(resultDiv);
    hideElement(errorDiv);

    // Verificar contrase√±a antes de crear el link
    const isAuthenticated = await verifyPassword();
    if (!isAuthenticated) {
      showError("Contrase√±a incorrecta. No se puede crear el link.");
      return;
    }

    showElement(loadingDiv);

    const formData = new FormData(form);
    const url = formData.get("url") as string;
    const customPath = formData.get("customPath") as string;

    // Validar que customPath est√© presente
    if (!customPath || !customPath.trim()) {
      showError("La ruta personalizada es obligatoria");
      return;
    }

    try {
      const response = await fetch("/api/shorten", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          url,
          customPath,
        }),
      });

      const data = await response.json();

      if (data.success) {
        showSuccess(data.data.shortUrl);
        form.reset();
        loadAllData(); // Recargar la lista de links
      } else {
        showError(data.error || "Error desconocido");
      }
    } catch (error) {
      showError("Error de conexi√≥n. Intenta de nuevo.");
    }
  });

  copyBtn.addEventListener("click", () => {
    copyToClipboard(shortUrlSpan.textContent || "");
  });

  refreshBtn.addEventListener("click", loadAllData);

  // Cargar links al cargar la p√°gina
  loadAllData();
</script>
